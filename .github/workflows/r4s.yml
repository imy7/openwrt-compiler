#
# Copyright (c) 2021 VergilGao <https://catfight360.com>
# ___      ___ _______   ________  ________  ___  ___       ________  ________  ________     
# |\  \    /  /|\  ___ \ |\   __  \|\   ____\|\  \|\  \     |\   ____\|\   __  \|\   __  \    
# \ \  \  /  / | \   __/|\ \  \|\  \ \  \___|\ \  \ \  \    \ \  \___|\ \  \|\  \ \  \|\  \   
#  \ \  \/  / / \ \  \_|/_\ \   _  _\ \  \  __\ \  \ \  \    \ \  \  __\ \   __  \ \  \\\  \  
#   \ \    / /   \ \  \_|\ \ \  \\  \\ \  \|\  \ \  \ \  \____\ \  \|\  \ \  \ \  \ \  \\\  \ 
#    \ \__/ /     \ \_______\ \__\\ _\\ \_______\ \__\ \_______\ \_______\ \__\ \__\ \_______\
#     \|__|/       \|_______|\|__|\|__|\|_______|\|__|\|_______|\|_______|\|__|\|__|\|_______|  
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# Description: 此脚本基于 P3TERX 的 Actions-OpenWrt 仓库修改而来。
# ┌────────────────────────────────────────────────────────┐
# │  Copyright (c) 2019-2020 P3TERX <https://p3terx.com>   │
# │                                                        │
# │ This is free software, licensed under the MIT License. │
# │ See /LICENSE for more information.                     │
# │                                                        │
# │ https://github.com/P3TERX/Actions-OpenWrt              │
# │ Description: Build OpenWrt using GitHub Actions        │
# └────────────────────────────────────────────────────────┘
#

name: R4S

on:
  workflow_dispatch:
    inputs:
      output:
        description: '选择编译固件还是生成配置文件'
        required: true
        type: choice
        default: 'firmware'
        options:
          - firmware
          - config
      ssh:
        description: '当生成配置文件时是否使用ssh'
        required: true
        type: boolean
        default: true
  schedule:
    - cron: 0 8 * * 6

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-21.02
  DEVICE_NAME: R4S
  FILES: R4S/files
  FEEDS_CONF: R4S/feeds.conf
  CONFIG_FILE: R4S/seed.config
  DIY_P1_SH: R4S/part1.sh
  DIY_P2_SH: R4S/part2.sh
  DIY_P3_SH: R4S/part3.sh
  TZ: Asia/Shanghai

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.set-matrix.outputs.release }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Generate build matrix
        id: set-matrix
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "release=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          # -m 所有项目以逗号分隔，并填满整行行宽
          # -B 不列出任何以 ~ 字符结束的项目
          # -Q 将条目名称括上双引号
          echo "matrix={\"config\": [$(ls -mBQ *.config)]}" >> $GITHUB_OUTPUT
  build:
    name: Build OpenWrt
    runs-on: ubuntu-latest
    needs: matrix
    env:
      release: ${{ needs.matrix.outputs.release }}
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}

    steps:
    - name: Checkout
      uses: actions/checkout@main
      
    - name: Init Env
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        docker rmi `docker images -q`
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-mark hold grub-efi-amd64-signed
        sudo -E apt update
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* moby* snap*
        sudo -E apt -y full-upgrade
        sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E systemctl daemon-reload
        sudo -E apt -y autoremove --purge
        sudo -E apt clean
        sudo -E timedatectl set-timezone "Asia/Shanghai"


    - name: 克隆 openwrt 源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载自定义 feeds.conf 文件
      run: |
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: 加载自定义gitclone
      run: |
        chmod +x $DIY_P3_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P3_SH

    - name: 加载自定义配置文件
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        cd ..
        [ -e $FILES ] && mv $FILES openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: mxschmitt/action-tmate@v3
      if: github.event.inputs.output == 'config' && github.event.inputs.ssh == 'true' && !cancelled()

    - name: 组织配置文件
      if: github.event.inputs.output == 'config' && !cancelled()
      id: organize_config
      run: |
        cd openwrt
        rm -f .config.old
        make defconfig
        mkdir -p /tmp/upload/config
        ./scripts/diffconfig.sh > /tmp/upload/config/seed.config
        echo "::set-output name=status::success"
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 上传配置文件
      if: steps.organize_config.outputs.status == 'success' && !cancelled()
      uses: actions/upload-artifact@main
      with:
        name: openwrt-config-${{ env.DEVICE_NAME }}-${{ env.FILE_DATE }}
        path: /tmp/upload

    - name: 编译固件
      if: github.event.inputs.output != 'config' && !cancelled()
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 组织固件文件
      if: github.event.inputs.output != 'config' && !cancelled()
      id: organize_firmware
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        mkdir -p /tmp/upload/firmware
        mv ./* /tmp/upload/firmware
        echo "::set-output name=status::success"

    - name: 上传固件
      uses: actions/upload-artifact@main
      if: steps.organize_firmware.outputs.status == 'success' && !cancelled()
      with:
        name: openwrt-firmware-${{ env.DEVICE_NAME }}-${{ env.FILE_DATE }}
        path: /tmp/upload/firmware

    - name: 移除旧的 Artifacts
      uses: c-hive/gha-remove-artifacts@v1.2.0
      with:
        age: '1 day'
        skip-recent: 20

    - name: 删除旧的 workflow 运行记录
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 90
